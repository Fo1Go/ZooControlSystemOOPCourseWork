# Generated by Django 5.0.3 on 2024-04-12 10:16

import api.models
import api.validators
import datetime
import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Animal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(max_length=1500)),
                ('nickname', models.CharField(blank=True, max_length=150, null=True, unique=True)),
                ('age_in_month', models.IntegerField(default=0, validators=[api.validators.positive_check])),
                ('gender', models.CharField(choices=api.models.ChoicesTypes.animal_genders_choices)),
            ],
            options={
                'verbose_name': 'Animal',
                'verbose_name_plural': 'Animals',
                'db_table': 'animals',
            },
        ),
        migrations.CreateModel(
            name='ContactInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost_adult_ticket', models.IntegerField(blank=True, null=True)),
                ('cost_children_ticket', models.IntegerField(blank=True, null=True)),
                ('open_time', models.DateTimeField(blank=True, null=True)),
                ('close_time', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'contact information',
                'verbose_name_plural': 'contact information',
                'db_table': 'contact_information',
            },
        ),
        migrations.CreateModel(
            name='Finance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_operation', models.DateField(blank=True, default=datetime.datetime(2024, 4, 12, 10, 16, 27, 445928), null=True)),
                ('type_of_operation', models.CharField(choices=api.models.ChoicesTypes.types_operations_choices)),
                ('amount', models.IntegerField(validators=[api.validators.positive_check])),
                ('description', models.TextField(blank=True, default='', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='JobPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(max_length=150, unique=True)),
                ('base_salary_rate', models.FloatField(default=1, validators=[api.validators.positive_check])),
            ],
            options={
                'verbose_name': 'Position',
                'verbose_name_plural': 'Positions',
                'db_table': 'job_positions',
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='Species',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150)),
                ('description', models.TextField()),
            ],
            options={
                'verbose_name': 'species',
                'verbose_name_plural': 'species',
                'db_table': 'species',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(null=True, unique=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='client', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'client',
                'verbose_name_plural': 'clients',
                'db_table': 'clients',
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150)),
                ('description', models.TextField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Feeding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_feeding', models.DateField(default=datetime.datetime(2024, 4, 12, 10, 16, 27, 421504))),
                ('type_of_feeding', models.CharField(choices=api.models.ChoicesTypes.feeding_types_choices)),
                ('count_of_feeding', models.IntegerField(blank=True, default=1, null=True, validators=[api.validators.positive_check])),
                ('animal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.animal')),
            ],
            options={
                'verbose_name': 'Feeding',
                'verbose_name_plural': 'Feeding',
                'db_table': 'feeding',
            },
        ),
        migrations.CreateModel(
            name='Employer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_salary_rate', models.FloatField(default=1, validators=[api.validators.positive_check])),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('position', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employer', to='api.jobposition')),
            ],
            options={
                'verbose_name': 'employer',
                'verbose_name_plural': 'employers',
                'db_table': 'employers',
            },
        ),
        migrations.CreateModel(
            name='MedicalCheckup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_date_check', models.DateField(blank=True, null=True)),
                ('diagnosis', models.TextField(blank=True, default='')),
                ('recommended_actions', models.TextField(blank=True, default='')),
                ('animal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checkups', to='api.animal')),
            ],
            options={
                'verbose_name': 'Medical Checkup',
                'verbose_name_plural': 'Medical Checkups',
                'db_table': 'medical_checkups',
            },
        ),
        migrations.AddField(
            model_name='animal',
            name='species',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='animals', to='api.species'),
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=api.models.ChoicesTypes.ticket_types_choices)),
                ('visit_date', models.DateField()),
                ('purchase_date', models.DateField(default=datetime.datetime(2024, 4, 12, 10, 16, 27, 418046))),
                ('ticket_number', models.CharField(unique=True)),
                ('price', models.FloatField()),
                ('client', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tickets', to='api.client')),
            ],
            options={
                'verbose_name': 'ticket',
                'verbose_name_plural': 'tickets',
                'db_table': 'tickets',
            },
        ),
    ]
